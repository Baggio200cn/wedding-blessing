from http.server import BaseHTTPRequestHandler
import json
from datetime import datetime
import random

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length > 0:
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
            else:
                request_data = {}
            
            tweet_result = self._generate_prediction_tweet(request_data)
            
            response = {
                \"status\": \"success\",
                \"tweet\": tweet_result,
                \"timestamp\": datetime.now().isoformat(),
                \"word_count\": len(tweet_result.get(\"content\", \"\"))
            }
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            self.end_headers()
            
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            error_response = {
                \"status\": \"error\",
                \"message\": f\"推文生成失败: {str(e)}\",
                \"timestamp\": datetime.now().isoformat()
            }
            
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(error_response).encode('utf-8'))
    
    def do_GET(self):
        response = {
            \"service\": \"自动推文生成API\",
            \"description\": \"基于预测结果生成中文Markdown格式推文\",
            \"templates\": [\"详细分析\", \"简洁版本\", \"技术报告\"],
            \"supported_formats\": [\"markdown\", \"plain_text\"]
        }
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def _generate_prediction_tweet(self, request_data):
        template_type = request_data.get('template_type', 'detailed')
        date_str = datetime.now().strftime(\"%Y年%m月%d日\")
        
        # 模拟预测数据
        mock_data = {
            \"front_zone\": [7, 12, 23, 28, 35],
            \"back_zone\": [3, 7],
            \"confidence\": 85.5
        }
        
        if template_type == \"simple\":
            content = f\"\"\"🎯 大乐透AI预测 {date_str}

前区：{' '.join(map(str, mock_data['front_zone']))}
后区：{' '.join(map(str, mock_data['back_zone']))}

AI置信度：{mock_data['confidence']}%

祝好运！理性购彩 🍀\"\"\"
        else:
            content = f\"\"\"# 🎯 大乐透智能预测分析报告
## 📅 预测日期：{date_str}

### 🤖 AI模型综合预测
**推荐号码组合：**
- 🔴 前区：{' '.join(map(str, mock_data['front_zone']))}
- 🔵 后区：{' '.join(map(str, mock_data['back_zone']))}

### 📊 模型分析详情
- 预测置信度：{mock_data['confidence']}%
- 基于历史数据：500期
- 模型融合：LSTM + Transformer + XGBoost

### ⚠️ 风险提示
本预测仅供参考，彩票投注需理性。

---
*Generated by AI-Powered Lottery Prediction System*
*预测时间：{datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}*\"\"\"
        
        return {
            \"content\": content,
            \"format\": \"markdown\",
            \"template\": template_type,
            \"word_count\": len(content)
        }
